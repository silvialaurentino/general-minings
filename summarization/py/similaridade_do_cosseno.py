# -*- coding: utf-8 -*-
"""Similaridade do cosseno.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qajaOD6ooKMCqOa5jlGjquwKHCXaIpiA
"""

import re
import nltk
import string
import numpy as np
from nltk.cluster.util import cosine_distance
import networkx as nx

nltk.download('punkt')
nltk.download('stopwords')

stopwords = nltk.corpus.stopwords.words('portuguese')

import spacy
!python -m spacy download pt

pln = spacy.load('pt')
pln

def preprocess(texto):
  formatado = texto.lower()
  tokens = []

  for token in nltk.word_tokenize(formatado):
    tokens.append(token)

  tokens = [palavra for palavra in tokens if palavra not in stopwords and palavra not in string.punctuation]
  formatado = ' '.join([str(elemento) for elemento in tokens if not elemento.isdigit()])

  return formatado

original = """A inteligência artificial é a inteligência similar à humana máquinas. 
              Definem como o estudo de agente artificial com inteligência. 
              Ciência e engenharia de produzir máquinas com inteligência. 
              Resolver problemas e possuir inteligência. 
              Relacionada ao comportamento inteligente. 
              Construção de máquinas para raciocinar. 
              Aprender com os erros e acertos. 
              Inteligência artificial é raciocinar nas situações do cotidiano."""
original = re.sub(r'\s+', ' ', original)
original

originais = [sentenca for sentenca in nltk.sent_tokenize(original)]
formatadas = [preprocess(original) for original in originais]

originais

formatadas

def simi(s1, s2):
  p1 = [palavra for palavra in nltk.word_tokenize(s1)]
  p2 = [palavra for palavra in nltk.word_tokenize(s2)]

  all = list(set(p1 + p2))

  v1 = [0] * len(all)
  v2 = [0] * len(all)

  for p in p1:
    v1[all.index(p)] += 1
  
  for p in p2:
    v2[all.index(p)] += 1
  
  return 1 - cosine_distance(v1, v2)

simi(formatadas[0], formatadas[1])

def matriz(sentencas):
  ms = np.zeros((len(sentencas), len(sentencas)))
  
  for i in range(len(sentencas)):
    for j in range(len(sentencas)):
      if i != j:
        ms[i][j] = simi(sentencas[i], sentencas[j])
  return ms

matriz(formatadas)

def sum(texto, qt):
  originais = [sentenca for sentenca in nltk.sent_tokenize(texto)]
  formatadas = [preprocess(original) for original in originais]

  ms = matriz(formatadas)
  
  grafo = nx.from_numpy_array(ms)
  
  pgrk = nx.pagerank(grafo)
  
  notas = sorted(((pgrk[i], nota) for i, nota in enumerate(originais)), reverse=True)
  
  melhores = []

  for i in range(qt):
    melhores.append(notas[i][1])

  return originais, melhores, notas

originais, melhores, notas = sum(original, 3)

originais

melhores

notas

def resumo(titulo, sentencas, melhores):
  from IPython.core.display import HTML
  texto = ''

  display(HTML(f'<h1>Resumo - {titulo}</h1>'))
  for i in sentencas:
    if i in melhores:
      texto += str(i).replace(i, f'<mark>{i}</mark>')
    else:
      texto += i
  display(HTML(f" {texto} "))

resumo('teste', originais, melhores)

!pip install goose3

from goose3 import Goose
g = Goose()
url = 'https://iaexpert.academy/2020/11/09/ia-preve-resultado-das-eleicoes-americanas/'
artigo = g.extract(url)

artigo.cleaned_text

originais, melhores, notas = sum(artigo.cleaned_text, 5)

resumo('Teste', originais, melhores)

def prelem(texto):
  formatado = texto.lower()
  texto = re.sub(r' +', ' ', texto)

  doc = pln(texto)
  tokens = []

  for token in doc:
    tokens.append(token.lemma_)

  tokens = [palavra for palavra in tokens if palavra not in stopwords and palavra not in string.punctuation]
  formatado = ' '.join([str(elemento) for elemento in tokens if not elemento.isdigit()])

  return formatado

def sumlem(texto, qt):
  originais = [sentenca for sentenca in nltk.sent_tokenize(texto)]
  formatadas = [prelem(original) for original in originais]

  ms = matriz(formatadas)
  
  grafo = nx.from_numpy_array(ms)
  
  pgrk = nx.pagerank(grafo)
  
  notas = sorted(((pgrk[i], nota) for i, nota in enumerate(originais)), reverse=True)
  
  melhores = []

  for i in range(qt):
    melhores.append(notas[i][1])

  return originais, melhores, notas

originais, melhores, notas = sumlem(artigo.cleaned_text, 5)

resumo('Teste', originais, melhores)